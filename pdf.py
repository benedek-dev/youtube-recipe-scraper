import json
import os
import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, PageBreak
from reportlab.lib.units import inch

# --- Konstansok a St√≠lushoz ---
PAGE_WIDTH, PAGE_HEIGHT = A4
MARGIN = 0.8 * inch
THUMBNAIL_WIDTH = 3 * inch
THUMBNAIL_HEIGHT = 1.8 * inch # Igaz√≠t√°s az ar√°nyhoz

# --- El√©r√©si √∫tvonalak (JAV√çTVA az √ñn 'recetas_output' strukt√∫r√°j√°hoz) ---
DATA_ROOT_DIR = 'recetas_output'
METADATA_FILE = os.path.join(DATA_ROOT_DIR, 'datos', 'recetas.json')
THUMBNAIL_DIR = os.path.join(DATA_ROOT_DIR, 'miniaturas')

OUTPUT_FILENAME_BASE = 'Libro_Recetas'
CHANNEL_NAME = '@bebepiskota2913' # A bor√≠t√≥laphoz

class RecipeCookbookGenerator:
    """
    Professzion√°lis PDF szak√°csk√∂nyvet gener√°l az √∂sszegy≈±jt√∂tt recept metaadatokb√≥l.
    """
    def __init__(self, metadata_path=METADATA_FILE, thumbnail_dir=THUMBNAIL_DIR):
        self.metadata_path = metadata_path
        self.thumbnail_dir = thumbnail_dir
        self.styles = getSampleStyleSheet()
        self.recipes = self._load_recipes()
        
        # --- Egy√©ni St√≠lusok ---
        self.styles.add(ParagraphStyle(name='TitleStyle', fontSize=24, spaceAfter=20, alignment=1, textColor=colors.HexColor('#4A90E2'), fontName='Helvetica-Bold'))
        self.styles.add(ParagraphStyle(name='CoverTitle', fontSize=36, spaceAfter=20, alignment=1, textColor=colors.HexColor('#8B572A'), fontName='Helvetica-Bold'))
        self.styles.add(ParagraphStyle(name='CoverSubtitle', fontSize=16, spaceAfter=60, alignment=1, textColor=colors.HexColor('#4A4A4A')))
        self.styles.add(ParagraphStyle(name='IndexTitle', fontSize=20, spaceAfter=15, alignment=0, textColor=colors.HexColor('#000000'), fontName='Helvetica-Bold'))
        self.styles.add(ParagraphStyle(name='IndexEntry', fontSize=12, leading=16, spaceAfter=2, textColor=colors.HexColor('#333333')))
        self.styles.add(ParagraphStyle(name='RecipeTitle', fontSize=18, spaceAfter=10, alignment=0, textColor=colors.HexColor('#8B572A'), fontName='Helvetica-Bold'))
        self.styles.add(ParagraphStyle(name='Description', fontSize=10, leading=14, spaceAfter=15, textColor=colors.HexColor('#333333')))
        self.styles.add(ParagraphStyle(name='Link', fontSize=9, spaceAfter=5, textColor=colors.HexColor('#4A90E2')))
        self.styles.add(ParagraphStyle(name='SmallHeader', fontSize=12, spaceAfter=5, textColor=colors.HexColor('#4A4A4A'), fontName='Helvetica-Bold'))


    def _load_recipes(self):
        """Bet√∂lti √©s rendezi a recept adatokat a JSON f√°jlb√≥l."""
        if not os.path.exists(self.metadata_path):
            print(f"ERROR: Metadata file not found at {self.metadata_path}")
            return []
        try:
            with open(self.metadata_path, 'r', encoding='utf-8') as f:
                recipes = json.load(f)
            # Rendez√©s c√≠m szerint
            return sorted(recipes, key=lambda r: r.get('titulo', ''))
        except Exception as e:
            print(f"ERROR: Could not load or parse recipes.json. {e}")
            return []

    def _get_output_filename(self):
        """L√©trehozza a d√°tummal ell√°tott kimeneti f√°jlnevet."""
        date_str = datetime.date.today().strftime("%Y%m%d")
        return f"{OUTPUT_FILENAME_BASE}_{date_str}.pdf"

    def _create_cover_page(self, story):
        """Hozz√°adja a professzion√°lis bor√≠t√≥lapot."""
        story.append(Spacer(1, PAGE_HEIGHT / 4)) # K√∂z√©pre igaz√≠t√°s f√ºgg≈ëlegesen
        story.append(Paragraph("‚ú® A Bebepisk√≥ta Szak√°csk√∂nyv ‚ú®", self.styles['CoverTitle']))
        story.append(Paragraph(f"Receptek a YouTube {CHANNEL_NAME} csatorn√°r√≥l", self.styles['CoverSubtitle']))
        
        # √ñsszefoglal√≥ inform√°ci√≥k
        summary_data = [
            ['Receptek sz√°ma:', len(self.recipes)],
            ['Gener√°l√°s d√°tuma:', datetime.date.today().strftime("%Y. %B %d.")],
        ]
        
        table_style = TableStyle([
            ('FONTNAME', (0,0), (-1,-1), 'Helvetica'),
            ('FONTSIZE', (0,0), (-1,-1), 14),
            ('ALIGN', (0,0), (0,-1), 'RIGHT'),
            ('ALIGN', (1,0), (1,-1), 'LEFT'),
            ('TOPPADDING', (0,0), (-1,-1), 8),
            ('BOTTOMPADDING', (0,0), (-1,-1), 8),
            ('TEXTCOLOR', (0,0), (-1,-1), colors.HexColor('#4A4A4A')),
        ])
        
        summary_table = Table(summary_data, colWidths=[3*inch, 3*inch])
        summary_table.setStyle(table_style)
        
        story.append(summary_table)
        story.append(PageBreak())

    def _create_index_page(self, story):
        """Hozz√°adja a tartalomjegyz√©k oldalt."""
        story.append(Paragraph("üìã Recept Index", self.styles['IndexTitle']))
        story.append(Spacer(1, 0.25 * inch))

        # K√©t oszlopos index a jobb megjelen√©s √©rdek√©ben
        num_recipes = len(self.recipes)
        mid_point = (num_recipes + 1) // 2

        # ITT HASZN√ÅLJUK A HELYES KULCSOT: 'titulo'
        col1_titles = [recipe.get('titulo', f"N√©vtelen Recept {i+1}") for i, recipe in enumerate(self.recipes[:mid_point])]
        col2_titles = [recipe.get('titulo', f"N√©vtelen Recept {i+mid_point+1}") for i, recipe in enumerate(self.recipes[mid_point:])]
        
        # Oszlopok kiegyenl√≠t√©se
        if len(col1_titles) > len(col2_titles):
            col2_titles.extend([''] * (len(col1_titles) - len(col2_titles)))
        elif len(col2_titles) > len(col1_titles):
            col1_titles.extend([''] * (len(col2_titles) - len(col1_titles)))

        index_rows = [[
            Paragraph(f"‚Ä¢ {col1_titles[i]}", self.styles['IndexEntry']),
            Paragraph(f"‚Ä¢ {col2_titles[i]}" if col2_titles[i] else "", self.styles['IndexEntry'])
        ] for i in range(len(col1_titles))]
        
        index_table = Table(index_rows, colWidths=[PAGE_WIDTH/2 - MARGIN - 0.1*inch, PAGE_WIDTH/2 - MARGIN - 0.1*inch])
        index_table.setStyle(TableStyle([
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('LEFTPADDING', (1,0), (1,-1), 20),
            ('LINEBELOW', (0,0), (-1,-1), 0, colors.white),
        ]))
        
        story.append(index_table)
        story.append(PageBreak())

    def _create_recipe_page(self, story, recipe):
        """Hozz√°ad egy receptet, egy oldalonk√©nt."""
        
        # A KULCSOK JAV√çTVA A JSON-HOZ IGAZ√çTVA:
        title = recipe.get('titulo', 'N√©vtelen Recept')
        description = recipe.get('descripcion', 'Nincs le√≠r√°s megadva.')
        video_url = recipe.get('url', '#')
        thumbnail_name = recipe.get('miniatura_local', None) # <<< JAV√çTVA miniatura_local-ra
        
        story.append(Paragraph(title, self.styles['RecipeTitle']))
        story.append(Spacer(1, 0.1 * inch))

        # --- K√©p √©s Link Szekci√≥ ---
        elements_for_table = []
        
        # 1. Miniat≈±r K√©p
        # A miniatura_local tartalmazza a teljes el√©r√©si utat: recetas_output\miniaturas\receta_001.jpg
        image_path = thumbnail_name
        
        if image_path and os.path.exists(image_path):
            img = Image(image_path, width=THUMBNAIL_WIDTH, height=THUMBNAIL_HEIGHT)
            elements_for_table.append([img])
        else:
            # Placeholder, ha a k√©p hi√°nyzik vagy hib√°s
            elements_for_table.append([Paragraph("<i>[A k√©p nem √©rhet≈ë el]</i>", self.styles['SmallHeader'])])

        # 2. Vide√≥ Link
        link_text = f'<b>N√©zze meg a vide√≥t:</b> <a href="{video_url}">{video_url}</a>'
        elements_for_table.append([Paragraph(link_text, self.styles['Link'])])

        # T√°bla l√©trehoz√°sa a tartalom igaz√≠t√°s√°hoz
        info_table = Table(elements_for_table, colWidths=[PAGE_WIDTH - 2*MARGIN])
        info_table.setStyle(TableStyle([
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('BOTTOMPADDING', (0,0), (-1,-1), 12),
        ]))
        story.append(info_table)

        # --- Le√≠r√°s/√ñsszetev≈ëk Szekci√≥ ---
        story.append(Paragraph("<b>Recept r√©szletek/√∂sszetev≈ëk:</b>", self.styles['SmallHeader']))
        
        # Le√≠r√°s el≈ëfeldolgoz√°sa a ReportLab sz√°m√°ra
        clean_description = description.replace('\n\n', '<br/><br/>').replace('\n', '<br/>')

        # ITT HASZN√ÅLJUK A HELYES KULCSOT: 'descripcion'
        story.append(Paragraph(clean_description, self.styles['Description']))
        
        # Oldalt√∂r√©s minden recept ut√°n
        story.append(PageBreak())


    def generate(self):
        """F≈ë met√≥dus a PDF gener√°l√°s√°nak koordin√°l√°s√°ra."""
        if not self.recipes:
            print("PDF generation skipped. No valid recipes found.")
            return

        output_filename = self._get_output_filename()
        
        # PDF dokumentum konfigur√°l√°sa
        doc = SimpleDocTemplate(
            output_filename,
            pagesize=A4,
            leftMargin=MARGIN,
            rightMargin=MARGIN,
            topMargin=MARGIN,
            bottomMargin=MARGIN
        )
        
        story = []
        
        print("Bor√≠t√≥lap hozz√°ad√°sa...")
        self._create_cover_page(story)
        
        print("Recept index hozz√°ad√°sa...")
        self._create_index_page(story)
        
        print(f"{len(self.recipes)} recept oldal hozz√°ad√°sa...")
        for recipe in self.recipes:
            self._create_recipe_page(story, recipe)
            
        # PDF elk√©sz√≠t√©se
        print(f"PDF √©p√≠t√©se: {output_filename}...")
        try:
            doc.build(story)
            print(f"‚úÖ K√©sz! A szak√°csk√∂nyv mentve mint {output_filename}")
        except Exception as e:
            print(f"‚ùå HIBA: Nem siker√ºlt elk√©sz√≠teni a PDF-et. {e}")
            

# --- Futtat√°si Blokk ---
if __name__ == '__main__':
    generator = RecipeCookbookGenerator()
    generator.generate()